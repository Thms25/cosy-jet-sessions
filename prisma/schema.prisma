generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("CJS_DB")
  shadowDatabaseUrl = env("SHADOW_DB")
}

model Artist {
  id           String    @id @default(cuid())
  name         String
  bio          String?
  shorttVideos YtShort[]
  videos       YtVideo[]
}

model YtVideo {
  id          String     @id @default(cuid())
  videoId     String     @unique
  title       String
  description String
  publishedAt DateTime
  thumbnail   String
  artistId    String?
  artist      Artist?    @relation(fields: [artistId], references: [id])
  playlists   Playlist[] @relation("PlaylistToYtVideo")
}

model YtShort {
  id          String   @id @default(cuid())
  videoId     String   @unique
  title       String
  description String
  publishedAt DateTime
  thumbnail   String
  artistId    String?
  artist      Artist?  @relation(fields: [artistId], references: [id])
}

model Playlist {
  id     String    @id @default(cuid())
  name   String
  userId String
  user   User      @relation(fields: [userId], references: [id])
  videos YtVideo[] @relation("PlaylistToYtVideo")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  image         String?
  role          String     @default("user")
  userName      String?    @unique
  age           Int?
  bio           String?
  emailVerified DateTime?
  accounts      Account[]
  playlists     Playlist[]
  sessions      Session[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
