generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Artist {
  id           String    @id @default(cuid())
  name         String
  bio          String?
  shorttVideos YtShort[]
  videos       YtVideo[]
}

model YtVideo {
  id          String   @id @default(cuid())
  videoId     String   @unique
  title       String
  description String
  publishedAt DateTime
  thumbnail   String
  artistId    String?
  artist      Artist?  @relation(fields: [artistId], references: [id])
  playlists   Playlist[]
}

model YtShort {
  id          String   @id @default(cuid())
  videoId     String   @unique
  title       String
  description String
  publishedAt DateTime
  thumbnail   String
  artistId    String?
  artist      Artist?  @relation(fields: [artistId], references: [id])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String      @unique
  // emailVerified DateTime?
  image         String?
  // accounts      Account[]
  // sessions      Session[]
  role          String      @default("user")
  userName      String?     @unique
  playlists     Playlist[]
}

// model Account {
//   id                 String    @id @default(cuid())
//   providerType       String
//   providerId         String
//   providerAccountId  String
//   refreshToken       String?
//   accessToken        String?
//   accessTokenExpires DateTime?
//   createdAt          DateTime   @default(now())
//   updatedAt          DateTime   @updatedAt
//   userId             String
//   user               User       @relation(fields: [userId], references: [id])
// }

// model Session {
//   id           String   @id @default(cuid())
//   expires      DateTime
//   sessionToken String   @unique
//   accessToken  String   @unique
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   userId       String
//   user         User     @relation(fields: [userId], references: [id])
// }

// model VerificationRequest {
//   id         String   @id @default(cuid())
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

model Playlist {
  id        String   @id @default(cuid())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  videos    YtVideo[]
}
